/* --------------------------Usercode Section------------------------ */
package src;   
import java_cup.runtime.*;
import java.util.*;
   


parser code {:

    public static ArrayList<String> list = new ArrayList<String>();
    
    public void report_error(String message, Object info)
    {
    StringBuffer m = new StringBuffer("Error");
   
    if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
        System.err.println(m);
    }

    public void sem_error(String context , String message)
    {
     	System.err.println("Semantic Error:"+ "<"+context+">" + message);
        //System.exit(1);
    }

    public void type_error (String context,String message)
    {
        System.err.println("Type Error:"+ "<"+context+">" + message);
        //System.exit(1);
    }

    public void report_fatal_error(String message, Object info)
    {
        report_error(message, info);
       // System.exit(1);
    }
:};
/* -------------------------------------------------------------------------------------------- */
/* ---------------------------GRAMMAR SYMBOL DECLARATION--------------------------------------- */

terminal           SEMI, COMMA, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, EQ, IF, ELSE, ENDIF, PRINT,
                   WHILE, BEGIN, END, INT, FLOAT, BOOL, STRING, OR ,LT, AND, GT,GTE,LTE, EQUAL, NOTEQUAL,VOID,RETURN, FUNC, COLON, THEN;

terminal Boolean   BOL;
terminal Integer   INTEGER_LITERAL;
terminal Float     FLOAT_LITERAL;
terminal String    ID;
terminal String    STRING_LITERAL;

non terminal Object             program, function_list, program_list;
non terminal Type               type;
non terminal Statement              param, statement, assignment, ifthen, print, while,for, declaration, declaration_list;
non terminal Statement              functioncall, functiondecl, initialization, initialization_list;
non terminal Lstatements              param_list, statement_list;
non terminal Expression               expr, factor, term,logic;
non terminal ArrayList<String>  id_list;
/* ---------------------------------------------------------------------------------------------- */                               

/* ----------------------------GRAMMAR RULES----------------------------------------------------- */

program_list   ::= program_list:pl program:p | program:p;

program        ::= declaration_list:dl statement_list:s
                   {: s.execute();:}
                  | 
                   declaration_list:dl function_list:fl statement_list:s
                   {: s.execute();
                   :}
                   |
                   function_list:fl statement_list:s
                   {: s.execute();
                   :};

function_list ::=  function_list:fl functiondecl:fd
                  |
                   functiondecl:fd;

functiondecl ::= FUNC ID:i LPAREN RPAREN COLON VOID BEGIN statement_list:s END
                 {: 
                     if(Tables.funcTable.containsKey(i)) { parser.sem_error(i,"Duplicate function declaration");}
                     else {
                            Tables.funcTable.put(i,s);
                     }
                  :}
                 | 
                  FUNC ID:i LPAREN RPAREN COLON type:t BEGIN statement_list:s RETURN expr:rv SEMI END
                  {: 
                   if(Tables.funcTable.containsKey(i)) { parser.sem_error(i,"Duplicate function declaration");}
                   else {
                            boolean b =false;

                            if(rv.getType().isInteger() && t.isInteger()){
                                b = true;
                                 Tables.envTable.put(i,new TypeValue(0));
                            }else if(rv.getType().isFloating_point() && t.isFloating_point()){
                                b = true;
                                Tables.envTable.put(i,new TypeValue(0.0f));
                            }else if(rv.getType().isBool() && t.isBool()){
                                b = true;
                                Tables.envTable.put(i,new TypeValue(false));
                            }

                            if(b){
                                Statement st = Statement.assignment(i,rv);                                
                                Tables.funcTable.put(i,new Lstatements(s,st));                                
                            }else{
                                parser.sem_error(i,"Function return type mismatch");
                            }
                        }
                  :}
                |
                FUNC ID:i LPAREN param_list:pl RPAREN COLON VOID BEGIN statement_list:s END
                 {: 
                     if(Tables.funcTable.containsKey(i)) { parser.sem_error(i,"Duplicate function declaration");}
                     else {
                            Tables.funcTable.put(i,s);
                            for (Statement p : pl.statementLists) {
                                if (p.type.isInteger())
                                {
                                    Tables.envTable.put(p.ID,new TypeValue(0));
                                }
                                if (p.type.isString())
                                {
                                    Tables.envTable.put(p.ID,new TypeValue(""));
                                }
                                if (p.type.isFloating_point())
                                {
                                    Tables.envTable.put(p.ID,new TypeValue(0.0f));
                                }
                                if (p.type.isBool())
                                {
                                    Tables.envTable.put(p.ID,new TypeValue(false));
                                }
                            }
                        System.out.println(Tables.envTable.toString());
                     }
                  :}
                 | 
                  FUNC ID:i LPAREN param_list:pl RPAREN COLON type:t BEGIN statement_list:s RETURN expr:rv SEMI END
                  {: 
                   if(Tables.funcTable.containsKey(i)) { parser.sem_error(i,"Duplicate function declaration");}
                   else {
                            boolean b =false;

                            if(rv.getType().isInteger() && t.isInteger()){
                                b = true;
                                 Tables.envTable.put(i,new TypeValue(0));
                            }else if(rv.getType().isFloating_point() && t.isFloating_point()){
                                b = true;
                                Tables.envTable.put(i,new TypeValue(0.0f));
                            }else if(rv.getType().isBool() && t.isBool()){
                                b = true;
                                Tables.envTable.put(i,new TypeValue(false));
                            }

                            if(b){
                                Statement st = Statement.assignment(i,rv);                                
                                Tables.funcTable.put(i,new Lstatements(s,st));                                
                            }else{
                                parser.sem_error(i,"Function return type mismatch");
                            }
                        }
                  :};

param_list ::= param_list:pl COMMA param:p {: RESULT = new Lstatements(pl, p); :}
                | param:p {: RESULT = new Lstatements(p); :};

param ::= type:t ID:i {: RESULT = new Statement(t,i); :};


declaration_list ::= declaration_list:dl declaration:d | declaration:d ;

initialization_list ::= initialization_list:il  initialization:i  | initialization:i;

declaration ::= type:t ID:i EQ expr:e SEMI
                {:  
                        if(Tables.envTable.containsKey(i)) { parser.sem_error(i,"Duplicate declaration "+i);}
                        else
                        {
                            if (t.isInteger())
                            {
                                Tables.envTable.put(i,new TypeValue(Integer.parseInt(e.getexp())));
                            }
                            if (t.isString())
                            {                           
                                Tables.envTable.put(i,new TypeValue(e.getexp()));                             
                            }
                            if (t.isFloating_point())
                            {                            
                                Tables.envTable.put(i,new TypeValue(Float.parseFloat(e.getexp())));
                            }
                            if (t.isBool())
                            {
                                Tables.envTable.put(i,new TypeValue(Boolean. parseBoolean(e.getexp())));
                            }        
                                
                            RESULT = Statement.assignment(t, i, e);                         
                        }
                    
                :}
                |
                type:t id_list:il SEMI
                {:  
                    for(String i : il){
                        if(Tables.envTable.containsKey(i)) { parser.sem_error(i,"Duplicate declaration "+i);}
                        else
                        {
                            if (t.isInteger())
                            {
                                Tables.envTable.put(i,new TypeValue(0));
                            }
                            if (t.isString())
                            {
                                Tables.envTable.put(i,new TypeValue(""));
                            }
                            if (t.isFloating_point())
                            {
                                Tables.envTable.put(i,new TypeValue(0.0f));
                            }
                            if (t.isBool())
                            {
                                Tables.envTable.put(i,new TypeValue(false));
                            }

                            RESULT = Statement.assignment(t, i);                         
                        }
                    }
                    il.clear();
                :};

id_list ::=   id_list:il COMMA ID:i
                {:  
                    il.add(i);
                    RESULT = il;
                :}
              | 
                ID:i
                {:  
                    parser.list.add(i);
                    RESULT = parser.list;
                :};



statement_list ::=  statement_list:l statement:s
                    {: RESULT = new Lstatements(l,s) ; :}                 
                   |  
                    statement:s
                    {: RESULT = new Lstatements(s); :};

statement    ::= assignment:s SEMI
                {: RESULT = s;:}
                | ifthen:s
                {: RESULT = s; :}
                | print:s SEMI
                {: RESULT = s; :}
                | while:s
                {: RESULT = s; :}
                | for:s
                {: RESULT = s; :}
                | BEGIN statement_list:s END
                {: RESULT = Statement.list(s); :}
                |functioncall:s SEMI
                {: RESULT = s; :};

functioncall ::= ID:i LPAREN RPAREN 
                  {: RESULT = Statement.functioncall(i); :};

while  ::= WHILE LPAREN expr:e RPAREN statement:s //while  ::= WHILE LPAREN expr:e RPAREN DO statement:s
                {:if((Boolean)e.getType().isBool()){
                        RESULT = Statement.whileloop(e,s); 
                    }else{                       
                        parser.type_error("e", " : expression in the while loop condition must be boolean.");
                    }
                 :};

print  ::= PRINT LPAREN expr:e RPAREN
                {: RESULT = Statement.print(e); :};

ifthen ::=  IF LPAREN expr:e RPAREN THEN statement:s ENDIF
            {:        
                if(e.getTypeValue() != null){
                    if((Boolean)e.getType().isBool()){
                        RESULT = Statement.ifthen(e,s); 
                    }else{                       
                         parser.type_error("e", " : expression in the if condition must be boolean.");
                    }
                }
                else{
                    parser.type_error("e", " : expression in the if condition is incorrect.");
                }
               
                
            :}
          | 
            IF LPAREN expr:e RPAREN THEN statement:s1 ELSE statement:s2 ENDIF
            {:  
                if((Boolean)e.getType().isBool()){
                    RESULT = Statement.ifthenelse(e,s1,s2); 
                }else{                       
                     parser.type_error("e", " : expression in the if condition must be boolean.");
                }
             :};

type ::= INT
         {: RESULT = new Type().integer();:} /*assigns integer type to result */
         |
         FLOAT
         {: RESULT = new Type().floating_point();:}
         |
         STRING
         {: RESULT = new Type().string();:}
         |
         BOOL
         {:RESULT = new Type().bool();:};

assignment ::= ID:i EQ expr:e
                  {:
                      if (!Tables.envTable.containsKey(i)) {parser.sem_error(i,"Variable undeclared");}
                      else
                      { 
                           if(Type.equals(Tables.envTable.get(i).getType(),e.getType())){
                               RESULT = Statement.assignment(i,e);
                           }else{
                               parser.type_error("e", " : expression in the assignment statement must have the type " + Tables.envTable.get(i).getType().getTypeName());
                           }
                      }
                    :}
                |
                 ID:i1 EQ ID:i2 LPAREN RPAREN
                  {:                  
                    if(Type.equals(Tables.envTable.get(i1).getType(),Tables.envTable.get(i2).getType())){
                        RESULT = Statement.functionReturn(i1,i2); 
                    }else{
                        parser.type_error(i2, " : function return type must be " + Tables.envTable.get(i1).getType().getTypeName());
                    }                                       
                  :};

expr      ::=    expr:e PLUS factor:f
                 {: 
                        RESULT = new Expression(new Arguments(e,f), sym.PLUS);
                  :}
                 |
                 expr:e MINUS factor:f
                 {: RESULT = new Expression(new Arguments(e,f), sym.MINUS); :}
                 |
                 factor:f
                 {: RESULT = f; :}
                 |
                 logic:l
                 {:RESULT = l; :}
                 ;

 factor    ::= factor:f TIMES term:t
                 {: RESULT = new Expression(new Arguments(f,t), sym.TIMES); :}
                 |
                 factor:f DIVIDE term:t
                 {: RESULT = new Expression(new Arguments(f,t), sym.DIVIDE); :}
                 |
                 term:t
                 {: RESULT = t; :}
                 ;

logic ::= term:t1 AND term:t2
          {:RESULT = new Expression(new Arguments(t1,t2), sym.AND);:}
          |
          term:t1 OR term:t2
          {:RESULT = new Expression(new Arguments(t1,t2), sym.OR);:}
          |
          term:t1 LT term:t2
          {:RESULT = new Expression(new Arguments(t1,t2), sym.LT);:}
          |
          term:t1 GT term:t2
          {:RESULT = new Expression(new Arguments(t1,t2), sym.GT);:}
          |
          term:t1 GTE term:t2
          {:RESULT = new Expression(new Arguments(t1,t2), sym.GTE);:}
          |
          term:t1 LTE term:t2
          {:RESULT = new Expression(new Arguments(t1,t2), sym.LTE);:}
          |
          term:t1 EQUAL term:t2
          {:RESULT = new Expression(new Arguments(t1,t2), sym.EQUAL);:}
          |
          term:t1 NOTEQUAL term:t2
          {:RESULT = new Expression(new Arguments(t1,t2), sym.NOTEQUAL);:}
          ;

 term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 INTEGER_LITERAL:n
                 {: RESULT = new Expression(n); :}
                 |
                 FLOAT_LITERAL:fl
                 {: RESULT = new Expression(fl); :}
                 |
                 STRING_LITERAL:sl
                 {: RESULT  = new Expression (sl, sl); :}
                 |
                 ID:i
                 {: RESULT = new Expression(i); :}
                 |
                 BOL:m
                 {: RESULT = new Expression(m); :};